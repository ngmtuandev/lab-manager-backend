import { Injectable, BadRequestException } from '@nestjs/common';
import { ScheduleRepository } from 'src/database/repository/schedule.repository';
import { LabRepository } from 'src/database/repository/lab.repository';
import { UserRepository } from 'src/database/repository/user.repository';
import { ScheduleEntity } from 'src/database/entity/schedule.entity';

@Injectable()
export class ScheduleService {
  constructor(
    private readonly scheduleRepository: ScheduleRepository,
    private readonly labRepository: LabRepository,
    private readonly userRepository: UserRepository,
  ) {}

  async createSchedule(scheduleData: {
    teacherId: number;
    labId: number;
    date: Date;
    startTime: string;
    endTime: string;
    name: string;
  }): Promise<ScheduleEntity> {
    const { teacherId, labId, date, startTime, endTime, name } = scheduleData;

    // Ki·ªÉm tra xem ph√≤ng c√≥ t·ªìn t·∫°i kh√¥ng
    const lab = await this.labRepository.findOne(labId);
    if (!lab) {
      throw new BadRequestException('Ph√≤ng kh√¥ng t·ªìn t·∫°i');
    }

    // Ki·ªÉm tra xem gi√°o vi√™n c√≥ t·ªìn t·∫°i kh√¥ng
    const teacher = await this.userRepository.findOne(teacherId);
    if (!teacher) {
      throw new BadRequestException('Gi√°o vi√™n kh√¥ng t·ªìn t·∫°i');
    }

    // Ki·ªÉm tra xung ƒë·ªôt l·ªãch
    const conflictingSchedules =
      await this.scheduleRepository.findConflictingSchedules(
        labId,
        date,
        startTime,
        endTime,
      );
    console.log(
      'üöÄ ~ ScheduleService ~ conflictingSchedules:',
      conflictingSchedules,
    );

    if (conflictingSchedules.length > 0) {
      throw new BadRequestException('Ph√≤ng ƒë√£ c√≥ l·ªãch d·∫°y v√†o th·ªùi gian n√†y');
    }

    // T·∫°o l·ªãch m·ªõi n·∫øu kh√¥ng c√≥ xung ƒë·ªôt
    const newSchedule = new ScheduleEntity();
    newSchedule.name = name;
    newSchedule.startTime = startTime;
    newSchedule.room = lab;
    newSchedule.date = date;
    newSchedule.endTime = endTime;
    newSchedule.isActive = true;
    newSchedule.teacher = teacher;

    return this.scheduleRepository.save(newSchedule);
  }

  // Find by teacher
  async getSchedulesByTeacher(teacherId: number): Promise<ScheduleEntity[]> {
    return this.scheduleRepository.findByTeacher(teacherId);
  }
}
